<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('./partials/head') %>
    <title><%= blog.title %> - Blogify</title>
    <!-- Include Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Google Fonts - Medium-like typography -->
    <link href="https://fonts.googleapis.com/css2?family=Charter:wght@400;700&family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #1a8917;
            --secondary-color: #6b6b6b;
            --accent-color: #ffc017;
            --success-color: #1a8917;
            --danger-color: #e74c3c;
            --warning-color: #f39c12;
            --light-bg: #fafafa;
            --dark-bg: #242424;
            --text-primary: #242424;
            --text-secondary: #6b6b6b;
            --text-muted: #959595;
            --border-color: #e6e6e6;
            --shadow-sm: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
            --shadow-md: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
            --shadow-lg: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Charter', Georgia, serif;
            background-color: #ffffff;
            color: var(--text-primary);
            line-height: 1.6;
            font-size: 18px;
        }

        /* Header Section - Medium-style */
        .blog-header {
            background: #ffffff;
            border-bottom: 1px solid var(--border-color);
            padding: 2rem 0;
            margin-bottom: 3rem;
        }

        .blog-container {
            max-width: 680px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        .blog-title {
            font-family: 'Charter', Georgia, serif;
            font-size: 3rem;
            font-weight: 700;
            line-height: 1.2;
            color: var(--text-primary);
            margin-bottom: 1.5rem;
            letter-spacing: -0.02em;
        }

        .blog-subtitle {
            font-size: 1.25rem;
            color: var(--text-secondary);
            margin-bottom: 2rem;
            font-weight: 400;
        }

        /* Author Section - Medium-style */
        .author-section {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 2rem;
            padding-bottom: 2rem;
            border-bottom: 1px solid var(--border-color);
        }

        .author-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            object-fit: cover;
        }

        .author-info {
            flex: 1;
        }

        .author-name {
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            font-size: 0.9rem;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }

        .author-name a {
            color: var(--text-primary);
            text-decoration: none;
        }

        .author-name a:hover {
            text-decoration: underline;
        }

        .author-actions {
            margin-left: auto;
        }

        .author-actions .btn {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .author-actions .btn:hover {
            transform: translateY(-1px);
        }

        .blog-meta {
            font-family: 'Inter', sans-serif;
            font-size: 0.8rem;
            color: var(--text-muted);
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .blog-meta span {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        /* Blog Content */
        .blog-content {
            max-width: 680px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        .blog-cover {
            width: 100%;
            max-height: 400px;
            object-fit: cover;
            border-radius: 4px;
            margin-bottom: 2rem;
        }

        .blog-body {
            font-family: 'Charter', Georgia, serif;
            font-size: 1.25rem;
            line-height: 1.8;
            color: var(--text-primary);
            margin-bottom: 3rem;
            white-space: pre-wrap;
        }

        /* Action Buttons - Medium-style */
        .blog-actions {
            display: flex;
            gap: 0.75rem;
            margin-bottom: 3rem;
            flex-wrap: wrap;
            padding-bottom: 2rem;
            border-bottom: 1px solid var(--border-color);
        }

        .btn {
            font-family: 'Inter', sans-serif;
            padding: 0.5rem 1rem;
            border-radius: 99px;
            font-weight: 500;
            font-size: 0.875rem;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
            border: 1px solid var(--border-color);
            background: transparent;
            color: var(--text-secondary);
            cursor: pointer;
        }

        .btn:hover {
            background: var(--light-bg);
            text-decoration: none;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .btn-primary:hover {
            background: #0f7a0d;
            border-color: #0f7a0d;
            color: white;
        }

        .btn-success {
            background: var(--success-color);
            color: white;
            border-color: var(--success-color);
        }

        .btn-success:hover {
            background: #0f7a0d;
            border-color: #0f7a0d;
            color: white;
        }

        .btn-warning {
            background: var(--warning-color);
            color: white;
            border-color: var(--warning-color);
        }

        .btn-warning:hover {
            background: #e67e22;
            border-color: #e67e22;
            color: white;
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
            border-color: var(--danger-color);
        }

        .btn-danger:hover {
            background: #c0392b;
            border-color: #c0392b;
            color: white;
        }

        .btn-outline-primary {
            background: transparent;
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .btn-outline-primary:hover {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.8rem;
        }

        /* Translate Section */
        .translate-section {
            background: var(--light-bg);
            border-radius: 8px;
            padding: 1.5rem;
            margin: 2rem 0;
            border: 1px solid var(--border-color);
        }

        .translate-section h3 {
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            font-size: 1rem;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 0.875rem;
            font-family: 'Inter', sans-serif;
            transition: all 0.2s ease;
            background: white;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(26, 137, 23, 0.1);
        }

        /* Language Search Styles */
        .language-select-container {
            position: relative;
        }

        .language-search-results {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid var(--border-color);
            border-top: none;
            border-radius: 0 0 8px 8px;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
            box-shadow: var(--shadow-md);
        }

        .language-search-results.show {
            display: block;
        }

        .language-option {
            padding: 0.75rem 1rem;
            cursor: pointer;
            border-bottom: 1px solid var(--border-color);
            transition: all 0.2s ease;
            font-family: 'Inter', sans-serif;
            font-size: 0.875rem;
        }

        .language-option:last-child {
            border-bottom: none;
        }

        .language-option:hover {
            background: var(--light-bg);
            color: var(--primary-color);
        }

        .language-option.selected {
            background: var(--primary-color);
            color: white;
        }

        .language-option .language-name {
            font-weight: 500;
        }

        .selected-language-display {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            margin-top: 0.5rem;
            font-size: 0.875rem;
            display: none;
        }

        .selected-language-display.show {
            display: block;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* Comments Section */
        .comments-section {
            max-width: 680px;
            margin: 3rem auto;
            padding: 0 1rem;
        }

        .comments-header {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .comments-header h2 {
            font-family: 'Inter', sans-serif;
            font-weight: 700;
            font-size: 1.5rem;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .comment-count {
            background: var(--light-bg);
            color: var(--text-secondary);
            padding: 0.25rem 0.75rem;
            border-radius: 99px;
            font-size: 0.875rem;
            font-weight: 500;
            border: 1px solid var(--border-color);
        }

        /* Comment Form */
        .comment-form {
            background: var(--light-bg);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid var(--border-color);
        }

        .comment-form h4 {
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            font-size: 1rem;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }

        .comment-input {
            width: 100%;
            padding: 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 0.875rem;
            font-family: 'Inter', sans-serif;
            resize: vertical;
            min-height: 100px;
            transition: all 0.2s ease;
            background: white;
        }

        .comment-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(26, 137, 23, 0.1);
        }

        /* Individual Comments */
        .comment {
            background: white;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.2s ease;
        }

        .comment:hover {
            border-color: #d0d0d0;
        }

        .comment-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .comment-author {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .comment-author img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
        }

        .comment-author h5 {
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            font-size: 0.875rem;
            color: var(--text-primary);
            margin: 0;
        }

        .comment-content {
            color: var(--text-primary);
            line-height: 1.6;
            margin-bottom: 1rem;
            font-size: 0.875rem;
        }

        .comment-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .comment-like {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--text-secondary);
            text-decoration: none;
            font-size: 0.8rem;
            font-family: 'Inter', sans-serif;
            transition: all 0.2s ease;
            background: none;
            border: none;
            cursor: pointer;
        }

        .comment-like:hover {
            color: var(--primary-color);
            text-decoration: none;
        }

        .comment-like i {
            font-size: 0.875rem;
        }

        .comment-edit {
            display: none;
            margin-top: 1rem;
        }

        .comment-edit textarea {
            width: 100%;
            padding: 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 0.875rem;
            font-family: 'Inter', sans-serif;
            resize: vertical;
            min-height: 100px;
            margin-bottom: 1rem;
            background: white;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .blog-container, .blog-content, .comments-section {
                padding: 0 1rem;
            }

            .blog-title {
                font-size: 2.25rem;
            }

            .blog-body {
                font-size: 1.125rem;
            }

            .blog-actions {
                justify-content: center;
            }

            .comment-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.75rem;
            }
        }

        /* Loading Animation */
        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Success/Error Messages */
        .alert {
            padding: 1rem 1.5rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            border: 1px solid;
            font-family: 'Inter', sans-serif;
            font-size: 0.875rem;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border-color: #c3e6cb;
        }

        .alert-danger {
            background: #f8d7da;
            color: #721c24;
            border-color: #f5c6cb;
        }

        .alert-info {
            background: #d1ecf1;
            color: #0c5460;
            border-color: #bee5eb;
        }

        .text-muted {
            color: var(--text-muted) !important;
        }

        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.8rem;
        }

        .text-center {
            text-align: center;
        }

        /* Medium-style empty state */
        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: var(--text-muted);
        }

        .empty-state i {
            font-size: 2rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .empty-state h4 {
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-secondary);
        }

        .empty-state p {
            font-size: 0.875rem;
        }

        /* Voice Reading Section */
        .voice-reading-section {
            background: var(--light-bg);
            border-radius: 8px;
            padding: 1.5rem;
            margin: 2rem 0;
            border: 1px solid var(--border-color);
        }

        .voice-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }

        .voice-settings {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        .voice-settings select {
            min-width: 150px;
            font-size: 0.875rem;
        }

        .voice-settings input[type="range"] {
            width: 100px;
            height: 6px;
            border-radius: 3px;
            background: var(--border-color);
            outline: none;
            -webkit-appearance: none;
        }

        .voice-settings input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
        }

        .voice-settings input[type="range"]::-moz-range-thumb {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            border: none;
        }

        #speedValue {
            font-size: 0.875rem;
            color: var(--text-secondary);
            min-width: 30px;
        }



        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* Highlight currently spoken text */
        .speaking {
            background: rgba(26, 137, 23, 0.1);
            border-radius: 4px;
            padding: 2px 4px;
        }

        @media (max-width: 768px) {
            .voice-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .voice-settings {
                justify-content: center;
            }
        }

        /* Custom Alert Styles */
        .custom-alert {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .custom-alert-content {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            max-width: 400px;
            width: 90%;
            animation: alertSlideIn 0.3s ease-out;
        }

        @keyframes alertSlideIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .custom-alert-header {
            background: var(--primary-color);
            color: white;
            padding: 1rem;
            border-radius: 8px 8px 0 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .custom-alert-header i {
            font-size: 1.2rem;
        }

        .custom-alert-body {
            padding: 1.5rem;
            color: var(--text-primary);
        }

        .custom-alert-footer {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
            text-align: right;
        }

        .custom-alert-footer .btn {
            min-width: 80px;
        }
    </style>
</head>
<body>
    <%- include('./partials/nav') %>

    <!-- Blog Header - Medium-style -->
    <div class="blog-header">
        <div class="blog-container">
        <h1 class="blog-title"><%= blog.title %></h1>
            
            <!-- Author Section -->
            <div class="author-section">
                <img src="<%= blog.createdBy.profileImageURL %>" alt="<%= blog.createdBy.fullName %>" class="author-avatar">
                <div class="author-info">
                    <div class="author-name">
                        <a href="/profile/<%= blog.createdBy._id %>"><%= blog.createdBy.fullName %></a>
                    </div>
                    <div class="blog-meta">
                        <span><i class="fas fa-heart"></i> <%= blog.likes.length %> likes</span>
                        <span><i class="fas fa-comments"></i> <%= comments.length %> comments</span>
                    </div>
                </div>
                <% if (locals.user && locals.user._id != blog.createdBy._id) { %>
                    <div class="author-actions">
                        <a href="/chat/start/<%= blog.createdBy._id %>" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-comments"></i>
                            Message
                        </a>
        </div>
        <% } %>
            </div>

            <!-- Action Buttons -->
            <div class="blog-actions">
        <% if (locals.user) { %>
                    <form action="/blog/<%= blog._id %>/like" method="post" style="display: inline;">
                        <button type="submit" class="btn <%= likeUnlikeString ? 'btn-success' : '' %>">
                            <i class="fas fa-heart"></i>
                            <%= likeUnlikeString ? 'Liked' : 'Like' %>
                        </button>
            </form>
                    
                    <form action="/blog/<%= locals.user._id %>/bookmarkBlog/<%= blog._id %>" method="post" style="display: inline;">
                        <button type="submit" class="btn <%= bookmarkBool ? 'btn-warning' : '' %>">
                            <i class="fas fa-bookmark"></i>
                            <%= bookmarkBool ? 'Bookmarked' : 'Bookmark' %>
                        </button>
            </form>
        <% } %>

                <% if (locals.user && locals.user._id == blog.createdBy._id) { %>
                    <a href="/blog/<%= blog._id %>/updateBlog" class="btn btn-warning">
                        <i class="fas fa-edit"></i>
                        Edit
                    </a>
                    <a href="/blog/<%= blog._id %>/delete" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this blog?')">
                        <i class="fas fa-trash"></i>
                        Delete
                    </a>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Blog Content -->
    <div class="blog-content">
        <!-- Cover Image -->
        <img src="<%= blog.coverImageURL %>" alt="Blog cover image" class="blog-cover"/>

        <!-- Blog Body -->
        <div class="blog-body" id="blogContent">
            <%= translated.bool ? translated.text : blog.body %>
        </div>

        <!-- Voice Reading Controls -->
        <div class="voice-reading-section">
            <div class="voice-controls">
                <button type="button" class="btn btn-outline-primary" id="playPauseBtn">
                    <i class="fas fa-play" id="playIcon"></i>
                    <i class="fas fa-pause" id="pauseIcon" style="display: none;"></i>
                    <span id="playText">Listen to Article</span>
                </button>
                <button type="button" class="btn btn-outline-secondary" id="stopBtn" style="display: none;">
                    <i class="fas fa-stop"></i>
                    Stop
                </button>
                <div class="voice-settings">
                    <select id="voiceSelect" class="form-control">
                        <option value="">Loading voices...</option>
                    </select>
                    <input type="range" id="speedControl" min="0.5" max="2" step="0.1" value="1" class="form-control">
                    <span id="speedValue">1x</span>
                </div>
            </div>

            <div class="voice-info" style="margin-top: 1rem; font-size: 0.875rem; color: var(--text-muted);">
                <i class="fas fa-info-circle"></i>
                <span id="voiceInfo">Voice reading supports multiple languages. The system will automatically detect your content's language and select the best available voice.</span>
            </div>
        </div>

        <!-- Custom Alert Modal -->
        <div id="customAlert" class="custom-alert" style="display: none;">
            <div class="custom-alert-content">
                <div class="custom-alert-header">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span id="alertTitle">Notice</span>
                </div>
                <div class="custom-alert-body">
                    <p id="alertMessage">This is a custom alert message.</p>
                </div>
                <div class="custom-alert-footer">
                    <button type="button" class="btn btn-primary" id="alertOkBtn">OK</button>
                </div>
            </div>
        </div>

        <!-- Translate Section -->
        <div class="translate-section">
            <h3><i class="fas fa-language"></i> Translate Blog</h3>
            <form action="/blog/<%= blog._id %>/<%= locals.user ? locals.user._id : 'abc23521aa1bef45662212a2' %>" method="get">
                <div class="form-group">
                    <div class="language-select-container">
                        <input 
                            type="text" 
                            id="languageSearch" 
                            class="form-control" 
                            placeholder="Search for a language to translate to..."
                            autocomplete="off"
                            required
                        >
                        <input type="hidden" name="translate" id="selectedLanguage" value="">
                        <div class="language-search-results" id="searchResults"></div>
                    </div>
                    <div class="form-text">
                        <i class="fas fa-info-circle"></i>
                        Type to search for a language, then click to select it
                </div>
                </div>
                <button type="button" class="btn btn-primary" id="testTranslateBtn">
                    <i class="fas fa-translate"></i>
                    Translate
                </button>
            </form>
        </div>
        </div>

        <!-- Comments Section -->
        <div class="comments-section">
        <div class="comments-header">
            <h2>
                <i class="fas fa-comments"></i>
                Comments
                <span class="comment-count"><%= comments.length %></span>
            </h2>
        </div>

        <!-- Comment Form -->
            <% if (locals.user) { %>
        <div class="comment-form">
            <h4><i class="fas fa-plus-circle"></i> Add a Comment</h4>
            <form action="/blog/comment/<%= blog._id %>" method="post">
                <textarea name="content" class="comment-input" placeholder="Share your thoughts..." required></textarea>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i>
                    Post Comment
                </button>
            </form>
        </div>
        <% } else { %>
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i>
            Please <a href="/user/signin" style="color: var(--primary-color);">sign in</a> to leave a comment.
        </div>
            <% } %>

        <!-- Comments List -->
        <% if (comments.length > 0) { %>
            <% comments.forEach(comment => { %>
            <div class="comment" id="comment-<%= comment._id %>">
                <div class="comment-header">
                    <div class="comment-author">
                        <img src="<%= comment.createdBy.profileImageURL %>" alt="<%= comment.createdBy.fullName %>">
                        <h5><%= comment.createdBy.fullName %></h5>
                    </div>
                    <% if (locals.user && comment.createdBy._id == locals.user._id) { %>
                    <div class="comment-actions">
                        <button class="btn btn-sm" onclick="editComment('<%= comment._id %>')">
                            <i class="fas fa-edit"></i>
                            Edit
                        </button>
                        <a href="/blog/comment/<%= comment._id %>/delete/<%= locals.user._id %>" class="btn btn-danger btn-sm" onclick="return confirm('Delete this comment?')">
                            <i class="fas fa-trash"></i>
                            Delete
                        </a>
                    </div>
                    <% } %>
                </div>
                
                <div class="comment-content">
                    <p><%= comment.content %></p>
                </div>

                <div class="comment-actions">
                    <% if (locals.user) { %>
                    <form action="/blog/<%= blog._id %>/comment/<%= comment._id %>/like" method="post" style="display: inline;">
                        <button type="submit" class="comment-like">
                            <i class="fas <%= comment.likes.includes(locals.user._id) ? 'fa-heart' : 'fa-heart' %>" style="color: <%= comment.likes.includes(locals.user._id) ? 'var(--danger-color)' : 'var(--text-secondary)' %>;"></i>
                            <%= comment.likes.length %> Likes
                        </button>
                    </form>
                    <% } %>
                    <span class="text-muted">
                        <i class="fas fa-clock"></i>
                        <%= new Date(comment.createdAt).toLocaleDateString() %>
                    </span>
                </div>
            </div>

            <!-- Edit Comment Form -->
            <div class="comment-edit" id="edit-comment-<%= comment._id %>">
                <form action="/blog/<%= blog._id %>/comment/<%= comment._id %>/update" method="post">
                    <textarea name="updatedComment" class="comment-input"><%= comment.content %></textarea>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i>
                        Update Comment
                    </button>
                    <button type="button" class="btn" onclick="cancelEdit('<%= comment._id %>')">
                        <i class="fas fa-times"></i>
                        Cancel
                    </button>
                </form>
            </div>
            <% }) %>
        <% } else { %>
        <div class="empty-state">
            <i class="fas fa-comments"></i>
            <h4>No comments yet</h4>
            <p>Be the first to share your thoughts!</p>
        </div>
        <% } %>
    </div>

    <%- include('./partials/scripts') %>

    <script>
        function editComment(commentId) {
            document.getElementById(`comment-${commentId}`).style.display = 'none';
            document.getElementById(`edit-comment-${commentId}`).style.display = 'block';
        }

        function cancelEdit(commentId) {
            document.getElementById(`comment-${commentId}`).style.display = 'block';
          document.getElementById(`edit-comment-${commentId}`).style.display = 'none';
        }

        // Add smooth scrolling
        document.addEventListener('DOMContentLoaded', function() {
            // Smooth scroll to comments when clicking on comment count
            const commentCount = document.querySelector('.comment-count');
            if (commentCount) {
                commentCount.addEventListener('click', function() {
                    document.querySelector('.comments-section').scrollIntoView({
                        behavior: 'smooth'
                    });
                });
            }

            // Add loading states to forms
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                form.addEventListener('submit', function() {
                    const submitBtn = form.querySelector('button[type="submit"]');
                    if (submitBtn) {
                        const originalText = submitBtn.innerHTML;
                        submitBtn.innerHTML = '<span class="loading"></span> Loading...';
                        submitBtn.disabled = true;
                        
                        // Re-enable after 5 seconds as fallback
                        setTimeout(() => {
                            submitBtn.innerHTML = originalText;
                            submitBtn.disabled = false;
                        }, 5000);
                    }
                });
            });

            // Language Search Functionality
            const languageSearch = document.getElementById('languageSearch');
            const selectedLanguage = document.getElementById('selectedLanguage');
            const searchResults = document.getElementById('searchResults');
            const testTranslateBtn = document.getElementById('testTranslateBtn');
            const container = document.querySelector('.language-select-container');

            if (languageSearch && selectedLanguage && searchResults) {
                // All languages from languages.js
                const languages = [
                    'Automatic', 'Afrikaans', 'Albanian', 'Amharic', 'Arabic', 'Armenian', 'Azerbaijani', 
                    'Basque', 'Belarusian', 'Bengali', 'Bosnian', 'Bulgarian', 'Catalan', 'Cebuano', 
                    'Chichewa', 'Chinese Simplified', 'Chinese Traditional', 'Corsican', 'Croatian', 
                    'Czech', 'Danish', 'Dutch', 'English', 'Esperanto', 'Estonian', 'Filipino', 
                    'Finnish', 'French', 'Frisian', 'Galician', 'Georgian', 'German', 'Greek', 
                    'Gujarati', 'Haitian Creole', 'Hausa', 'Hawaiian', 'Hebrew', 'Hindi', 'Hmong', 
                    'Hungarian', 'Icelandic', 'Igbo', 'Indonesian', 'Irish', 'Italian', 'Japanese', 
                    'Javanese', 'Kannada', 'Kazakh', 'Khmer', 'Korean', 'Kurdish (Kurmanji)', 
                    'Kyrgyz', 'Lao', 'Latin', 'Latvian', 'Lithuanian', 'Luxembourgish', 'Macedonian', 
                    'Malagasy', 'Malay', 'Malayalam', 'Maltese', 'Maori', 'Marathi', 'Mongolian', 
                    'Myanmar (Burmese)', 'Nepali', 'Norwegian', 'Pashto', 'Persian', 'Polish', 
                    'Portuguese', 'Punjabi', 'Romanian', 'Russian', 'Samoan', 'Scots Gaelic', 
                    'Serbian', 'Sesotho', 'Shona', 'Sindhi', 'Sinhala', 'Slovak', 'Slovenian', 
                    'Somali', 'Spanish', 'Sundanese', 'Swahili', 'Swedish', 'Tajik', 'Tamil', 
                    'Telugu', 'Thai', 'Turkish', 'Ukrainian', 'Urdu', 'Uzbek', 'Vietnamese', 
                    'Welsh', 'Xhosa', 'Yiddish', 'Yoruba', 'Zulu'
                ];

                // Create selected language display
                const selectedDisplay = document.createElement('div');
                selectedDisplay.className = 'selected-language-display';
                selectedDisplay.innerHTML = '<i class="fas fa-check"></i> <span id="selectedLangText"></span>';
                container.appendChild(selectedDisplay);

                // Search functionality
                languageSearch.addEventListener('input', function() {
                    const query = this.value.toLowerCase().trim();
                    
                    if (query.length === 0) {
                        searchResults.classList.remove('show');
                        return;
                    }

                    const filteredLanguages = languages.filter(lang => 
                        lang.toLowerCase().includes(query)
                    );

                    if (filteredLanguages.length > 0) {
                        searchResults.innerHTML = filteredLanguages.map(lang => `
                            <div class="language-option" data-value="${lang}">
                                <span class="language-name">${lang}</span>
                            </div>
                        `).join('');
                        searchResults.classList.add('show');
                    } else {
                        searchResults.innerHTML = '<div class="language-option">No languages found</div>';
                        searchResults.classList.add('show');
                    }
                });

                // Handle language selection from search results
                searchResults.addEventListener('click', function(e) {
                    if (e.target.closest('.language-option')) {
                        const option = e.target.closest('.language-option');
                        const languageName = option.dataset.value;
                        
                        if (languageName && languageName !== 'No languages found') {
                            // Set the hidden input value
                            selectedLanguage.value = languageName;
                            
                            // Update the display
                            document.getElementById('selectedLangText').textContent = languageName;
                            selectedDisplay.classList.add('show');
                            
                            // Clear search and hide results
                            languageSearch.value = '';
                            searchResults.classList.remove('show');
                            
                            // Enable translate button
                            translateBtn.disabled = false;
                        }
                    }
                });

                // Hide search results when clicking outside
                document.addEventListener('click', function(e) {
                    if (!container.contains(e.target)) {
                        searchResults.classList.remove('show');
                    }
                });

                // Handle keyboard navigation
                languageSearch.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape') {
                        languageSearch.value = '';
                        searchResults.classList.remove('show');
                    }
                });

                // Clear selection when search input is focused
                languageSearch.addEventListener('focus', function() {
                    if (selectedLanguage.value) {
                        selectedLanguage.value = '';
                        selectedDisplay.classList.remove('show');
                        translateBtn.disabled = true;
                    }
                });

                // Add form submission debugging
                const translateForm = document.querySelector('.translate-section form');
                translateForm.addEventListener('submit', function(e) {
                    console.log('Form submitted');
                    console.log('Selected language:', selectedLanguage.value);
                    console.log('Form action:', this.action);
                    console.log('Form method:', this.method);
                    
                    if (!selectedLanguage.value) {
                        e.preventDefault();
                        showCustomAlert('Language Required', 'Please select a language first');
                        return false;
                    }
                    
                    // Force set the hidden input value
                    selectedLanguage.value = selectedLanguage.value;
                    console.log('Final selected language:', selectedLanguage.value);
                    
                    // Log the URL that will be called
                    const url = new URL(this.action, window.location.origin);
                    url.searchParams.set('translate', selectedLanguage.value);
                    console.log('Will navigate to:', url.toString());
                });



                // Test the form submission manually
                console.log('Form element:', translateForm);
                console.log('Form action:', translateForm.action);
                console.log('Form method:', translateForm.method);

                // Add translate button functionality
                testTranslateBtn.addEventListener('click', function() {
                    console.log('Translate button clicked');
                    
                    // Use the currently selected language
                    if (selectedLanguage.value) {
                        console.log('Using selected language:', selectedLanguage.value);
                        // Manually submit the form
                        console.log('Manually submitting form...');
                        translateForm.submit();
                    } else {
                        showCustomAlert('Language Required', 'Please select a language first!');
                        console.log('No language selected');
                    }
                });
            }
        });

        // Voice Reading Functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Custom Alert Function
            function showCustomAlert(title, message) {
                const alertModal = document.getElementById('customAlert');
                const alertTitle = document.getElementById('alertTitle');
                const alertMessage = document.getElementById('alertMessage');
                const alertOkBtn = document.getElementById('alertOkBtn');
                
                alertTitle.textContent = title;
                alertMessage.textContent = message;
                alertModal.style.display = 'flex';
                
                // Focus the OK button for accessibility
                alertOkBtn.focus();
                
                // Close alert when OK is clicked
                alertOkBtn.onclick = function() {
                    alertModal.style.display = 'none';
                };
                
                // Close alert when clicking outside
                alertModal.onclick = function(e) {
                    if (e.target === alertModal) {
                        alertModal.style.display = 'none';
                    }
                };
                
                // Close alert with Escape key
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape' && alertModal.style.display === 'flex') {
                        alertModal.style.display = 'none';
                    }
                });
            }

            // Voice reading variables
            let speechSynthesis = window.speechSynthesis;
            let speechUtterance = null;
            let isPlaying = false;
            let currentVoice = null;
            let currentSpeed = 1;
            let currentText = '';
            let voiceReadingEnabled = true;
            
            // Override speechSynthesis.speak to prevent it when disabled
            const originalSpeak = speechSynthesis.speak;
            speechSynthesis.speak = function(utterance) {
                if (!voiceReadingEnabled) {
                    console.log('Speech synthesis blocked - no suitable voice available');
                    return;
                }
                return originalSpeak.call(this, utterance);
            };

            // DOM elements
            const playPauseBtn = document.getElementById('playPauseBtn');
            const stopBtn = document.getElementById('stopBtn');
            const voiceSelect = document.getElementById('voiceSelect');
            const speedControl = document.getElementById('speedControl');
            const speedValue = document.getElementById('speedValue');
            const playIcon = document.getElementById('playIcon');
            const pauseIcon = document.getElementById('pauseIcon');
            const playText = document.getElementById('playText');
            const blogContent = document.getElementById('blogContent');

            // Initialize voice reading
            function initVoiceReading() {
                if (!speechSynthesis) {
                    console.log('Speech synthesis not supported');
                    return;
                }

                // Detect language of the text
                function detectLanguage(text) {
                    // Simple language detection based on character sets
                    const urduPattern = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/;
                    const arabicPattern = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/;
                    const hindiPattern = /[\u0900-\u097F]/;
                    const chinesePattern = /[\u4E00-\u9FFF]/;
                    const japanesePattern = /[\u3040-\u309F\u30A0-\u30FF]/;
                    const koreanPattern = /[\uAC00-\uD7AF]/;
                    
                    if (urduPattern.test(text)) return 'ur';
                    if (arabicPattern.test(text)) return 'ar';
                    if (hindiPattern.test(text)) return 'hi';
                    if (chinesePattern.test(text)) return 'zh';
                    if (japanesePattern.test(text)) return 'ja';
                    if (koreanPattern.test(text)) return 'ko';
                    
                    // Default to English if no specific pattern is found
                    return 'en';
                }

                // Load available voices
                function loadVoices() {
                    const voices = speechSynthesis.getVoices();
                    
                    // Get language from URL parameter first, then fall back to content detection
                    const urlParams = new URLSearchParams(window.location.search);
                    const translateParam = urlParams.get('translate');
                    let contentLanguage = 'en'; // default
                    
                    if (translateParam) {
                        // Map language names to language codes
                        const languageMap = {
                            'Urdu': 'ur',
                            'Arabic': 'ar',
                            'Hindi': 'hi',
                            'Chinese Simplified': 'zh',
                            'Chinese Traditional': 'zh-TW',
                            'Japanese': 'ja',
                            'Korean': 'ko',
                            'Spanish': 'es',
                            'French': 'fr',
                            'German': 'de',
                            'Italian': 'it',
                            'Portuguese': 'pt',
                            'Russian': 'ru',
                            'Dutch': 'nl',
                            'Polish': 'pl',
                            'Indonesian': 'id'
                        };
                        
                        contentLanguage = languageMap[translateParam] || 'en';
                        console.log('Language from URL:', translateParam, '->', contentLanguage);
                    } else {
                        contentLanguage = 'en'; // Default to English
                        console.log('Using default language: en');
                    }
                    
                    // Check if we have a suitable voice for the detected language
                    const suitableVoice = voices.find(voice => 
                        voice.lang.startsWith(contentLanguage) || 
                        voice.lang.includes(contentLanguage)
                    );
                    
                    if (!suitableVoice) {
                        // No suitable voice found - disable voice reading
                        console.log('No suitable voice found for language:', contentLanguage);
                        voiceSelect.innerHTML = '<option value="">No suitable voice available</option>';
                        voiceSelect.disabled = true;
                        disableVoiceControls();
                        return;
                    }
                    
                    // We have a suitable voice, auto-select it and hide the dropdown
                    const selectedVoice = voices.find(voice => 
                        voice.lang.startsWith(contentLanguage) || 
                        voice.lang.includes(contentLanguage)
                    );
                    
                    if (selectedVoice) {
                        currentVoice = selectedVoice;
                        console.log('Auto-selected voice:', selectedVoice.name, 'for language:', selectedVoice.lang);
                        
                        // Hide the voice selection dropdown
                        const voiceSettings = document.querySelector('.voice-settings');
                        if (voiceSettings) {
                            voiceSettings.style.display = 'none';
                        }
                        
                        // Update voice info
                        const voiceInfo = document.getElementById('voiceInfo');
                        if (voiceInfo) {
                            if (contentLanguage === 'ur') {
                                voiceInfo.textContent = 'Urdu voice selected automatically.';
                            } else if (contentLanguage === 'ar') {
                                voiceInfo.textContent = 'Arabic voice selected automatically.';
                            } else if (contentLanguage === 'hi') {
                                voiceInfo.textContent = 'Hindi voice selected automatically.';
                            } else {
                                voiceInfo.textContent = 'Voice selected automatically for your content.';
                            }
                        }
                    }
                }

                // Load voices when available
                if (speechSynthesis.getVoices().length > 0) {
                    loadVoices();
                } else {
                    speechSynthesis.addEventListener('voiceschanged', loadVoices);
                }

                // Voice selection change
                voiceSelect.addEventListener('change', function() {
                    const voices = speechSynthesis.getVoices();
                    const selectedIndex = parseInt(this.value);
                    if (selectedIndex >= 0 && selectedIndex < voices.length) {
                        currentVoice = voices[selectedIndex];
                        if (isPlaying) {
                            stopReading();
                            startReading();
                        }
                    }
                });

                // Speed control
                speedControl.addEventListener('input', function() {
                    currentSpeed = parseFloat(this.value);
                    speedValue.textContent = currentSpeed + 'x';
                    if (isPlaying && speechUtterance) {
                        speechUtterance.rate = currentSpeed;
                    }
                });

                // Play/Pause button
                playPauseBtn.addEventListener('click', function() {
                    console.log('Button clicked!');
                    console.log('Button text:', playText.textContent);
                    console.log('Voice reading enabled:', voiceReadingEnabled);
                    
                    // Check if this is the "Voice Not Available" button
                    if (playText.textContent === 'Voice Not Available - Click for Info') {
                        console.log('Showing error message...');
                        // Get the current language from URL
                        const urlParams = new URLSearchParams(window.location.search);
                        const translateParam = urlParams.get('translate');
                        
                        // Show error message on the page
                        const voiceInfo = document.getElementById('voiceInfo');
                        if (voiceInfo) {
                            if (translateParam) {
                                voiceInfo.innerHTML = `<span style="color: #e74c3c; font-weight: bold;">❌ Voice reading is not available for ${translateParam} language. No suitable voice found on your system.</span>`;
                            } else {
                                voiceInfo.innerHTML = `<span style="color: #e74c3c; font-weight: bold;">❌ Voice reading is not available. No suitable voice found for the current content.</span>`;
                            }
                        }
                        
                        // Also show custom alert for immediate feedback
                        if (translateParam) {
                            showCustomAlert('Voice Not Available', `Voice reading is not available for ${translateParam} language. No suitable voice found on your system.`);
                        } else {
                            showCustomAlert('Voice Not Available', 'Voice reading is not available. No suitable voice found for the current content.');
                        }
                        return;
                    }
                    
                    // Normal voice reading functionality
                    if (isPlaying) {
                        if (speechSynthesis.paused) {
                            resumeReading();
                        } else {
                            pauseReading();
                        }
                    } else {
                        startReading();
                    }
                });

                // Stop button
                stopBtn.addEventListener('click', function() {
                    // Don't do anything if controls are disabled
                    if (this.disabled) {
                        return;
                    }
                    stopReading();
                });

                // Speech events
                speechSynthesis.addEventListener('end', function() {
                    isPlaying = false;
                    updatePlayButton();
                    removeHighlighting();
                });

                speechSynthesis.addEventListener('pause', function() {
                    isPlaying = false;
                    updatePlayButton();
                });

                speechSynthesis.addEventListener('resume', function() {
                    isPlaying = true;
                    updatePlayButton();
                });
            }



            // Start reading
            function startReading() {
                // Check if voice reading is enabled
                if (!voiceReadingEnabled) {
                    console.log('Voice reading is disabled - no suitable voice available');
                    
                    // Get the current language from URL
                    const urlParams = new URLSearchParams(window.location.search);
                    const translateParam = urlParams.get('translate');
                    
                    if (translateParam) {
                        showCustomAlert('Voice Not Available', `Voice reading is not available for ${translateParam} language. No suitable voice found on your system.`);
                    } else {
                        showCustomAlert('Voice Not Available', 'Voice reading is not available. No suitable voice found for the current content.');
                    }
                    return;
                }

                currentText = blogContent.textContent.trim();
                if (!currentText) {
                    showCustomAlert('No Content', 'No content to read');
                    return;
                }

                // If no voice is selected, try to auto-select one
                if (!currentVoice) {
                    const voices = speechSynthesis.getVoices();
                    
                    // Get language from URL parameter first, then fall back to content detection
                    const urlParams = new URLSearchParams(window.location.search);
                    const translateParam = urlParams.get('translate');
                    let contentLanguage = 'en'; // default
                    
                    if (translateParam) {
                        // Map language names to language codes
                        const languageMap = {
                            'Urdu': 'ur',
                            'Arabic': 'ar',
                            'Hindi': 'hi',
                            'Chinese Simplified': 'zh',
                            'Chinese Traditional': 'zh-TW',
                            'Japanese': 'ja',
                            'Korean': 'ko',
                            'Spanish': 'es',
                            'French': 'fr',
                            'German': 'de',
                            'Italian': 'it',
                            'Portuguese': 'pt',
                            'Russian': 'ru',
                            'Dutch': 'nl',
                            'Polish': 'pl',
                            'Indonesian': 'id'
                        };
                        
                        contentLanguage = languageMap[translateParam] || 'en';
                        console.log('Language from URL:', translateParam, '->', contentLanguage);
                    } else {
                        contentLanguage = 'en'; // Default to English
                        console.log('Using default language: en');
                    }
                    
                    // Try to find a matching voice
                    let selectedVoice = voices.find(voice => 
                        voice.lang.startsWith(contentLanguage) || 
                        voice.lang.includes(contentLanguage)
                    );
                    
                    if (selectedVoice) {
                        currentVoice = selectedVoice;
                        const index = voices.indexOf(selectedVoice);
                        voiceSelect.value = index;
                        console.log('Auto-selected voice:', selectedVoice.name, 'for language:', selectedVoice.lang);
                    } else {
                        console.log(`No voice available for ${contentLanguage.toUpperCase()} language. Voice reading is not available for this content.`);
                        disableVoiceControls();
                        return;
                    }
                }

                // Stop any current speech
                speechSynthesis.cancel();

                // Create new utterance for the entire text
                speechUtterance = new SpeechSynthesisUtterance(currentText);
                speechUtterance.voice = currentVoice;
                speechUtterance.rate = currentSpeed;
                speechUtterance.pitch = 1;
                speechUtterance.volume = 1;

                // Add event listeners
                speechUtterance.addEventListener('start', function() {
                    isPlaying = true;
                    updatePlayButton();
                });

                speechUtterance.addEventListener('end', function() {
                    isPlaying = false;
                    updatePlayButton();
                    removeHighlighting();
                });

                speechUtterance.addEventListener('pause', function() {
                    console.log('Speech utterance paused');
                    updatePlayButton();
                });

                speechUtterance.addEventListener('resume', function() {
                    console.log('Speech utterance resumed');
                    updatePlayButton();
                });

                // Start speaking (will be blocked by override if disabled)
                speechSynthesis.speak(speechUtterance);
            }



            // Pause reading
            function pauseReading() {
                if (speechSynthesis.speaking && !speechSynthesis.paused) {
                    speechSynthesis.pause();
                    console.log('Paused speech synthesis');
                }
            }

            // Resume reading
            function resumeReading() {
                if (speechSynthesis.paused) {
                    speechSynthesis.resume();
                    console.log('Resumed speech synthesis');
                }
            }

            // Stop reading
            function stopReading() {
                speechSynthesis.cancel();
                isPlaying = false;
                updatePlayButton();
                removeHighlighting();
            }



            // Update play button
            function updatePlayButton() {
                if (speechSynthesis.speaking) {
                    if (speechSynthesis.paused) {
                        playIcon.style.display = 'inline';
                        pauseIcon.style.display = 'none';
                        playText.textContent = 'Resume';
                    } else {
                        playIcon.style.display = 'none';
                        pauseIcon.style.display = 'inline';
                        playText.textContent = 'Pause';
                    }
                    stopBtn.style.display = 'inline-flex';
                } else {
                    playIcon.style.display = 'inline';
                    pauseIcon.style.display = 'none';
                    playText.textContent = 'Listen to Article';
                    stopBtn.style.display = 'none';
                }
            }



            // Remove highlighting
            function removeHighlighting() {
                const highlighted = document.querySelectorAll('.speaking');
                highlighted.forEach(el => el.classList.remove('speaking'));
            }

            // Disable voice controls when no suitable voice is available
            function disableVoiceControls() {
                voiceReadingEnabled = false;
                
                // Keep the button but change its text and make it show error when clicked
                playPauseBtn.disabled = false; // Re-enable to allow clicking
                playPauseBtn.style.opacity = '0.6';
                playText.textContent = 'Voice Not Available - Click for Info';
                playIcon.style.display = 'inline';
                pauseIcon.style.display = 'none';
                
                // Disable other controls
                stopBtn.disabled = true;
                voiceSelect.disabled = true;
                speedControl.disabled = true;
                
                // Cancel any ongoing speech immediately
                speechSynthesis.cancel();
                
                // Force stop any speaking
                if (speechSynthesis.speaking) {
                    speechSynthesis.pause();
                    speechSynthesis.cancel();
                }
            }

            // Enable voice controls when suitable voice is available
            function enableVoiceControls() {
                voiceReadingEnabled = true;
                playPauseBtn.disabled = false;
                stopBtn.disabled = false;
                voiceSelect.disabled = false;
                speedControl.disabled = false;
                
                // Reset button text
                playText.textContent = 'Listen to Article';
                playIcon.style.display = 'inline';
                pauseIcon.style.display = 'none';
            }

            // Function to update voice selection based on current content
            function updateVoiceForCurrentContent() {
                const currentContent = blogContent.textContent.trim();
                
                // Get language from URL parameter first, then fall back to content detection
                const urlParams = new URLSearchParams(window.location.search);
                const translateParam = urlParams.get('translate');
                let contentLanguage = 'en'; // default
                
                if (translateParam) {
                    // Map language names to language codes
                    const languageMap = {
                        'Urdu': 'ur',
                        'Arabic': 'ar',
                        'Hindi': 'hi',
                        'Chinese Simplified': 'zh',
                        'Chinese Traditional': 'zh-TW',
                        'Japanese': 'ja',
                        'Korean': 'ko',
                        'Spanish': 'es',
                        'French': 'fr',
                        'German': 'de',
                        'Italian': 'it',
                        'Portuguese': 'pt',
                        'Russian': 'ru',
                        'Dutch': 'nl',
                        'Polish': 'pl',
                        'Indonesian': 'id'
                    };
                    
                    contentLanguage = languageMap[translateParam] || detectLanguage(currentContent);
                    console.log('Updating voice - Language from URL:', translateParam, '->', contentLanguage);
                } else {
                    contentLanguage = detectLanguage(currentContent);
                    console.log('Updating voice - Detected content language:', contentLanguage);
                }
                
                const voices = speechSynthesis.getVoices();
                
                // Try to find a voice matching the detected language
                let selectedVoice = voices.find(voice => 
                    voice.lang.startsWith(contentLanguage) || 
                    voice.lang.includes(contentLanguage)
                );

                if (selectedVoice) {
                    currentVoice = selectedVoice;
                    const index = voices.indexOf(selectedVoice);
                    voiceSelect.value = index;
                    console.log('Updated voice to:', selectedVoice.name, 'for language:', selectedVoice.lang);
                    enableVoiceControls();
                    
                    // Update voice info
                    const voiceInfo = document.getElementById('voiceInfo');
                    if (voiceInfo) {
                        if (contentLanguage === 'ur') {
                            voiceInfo.textContent = 'Urdu content detected. Voice updated to: ' + selectedVoice.name;
                        } else if (contentLanguage === 'ar') {
                            voiceInfo.textContent = 'Arabic content detected. Voice updated to: ' + selectedVoice.name;
                        } else if (contentLanguage === 'hi') {
                            voiceInfo.textContent = 'Hindi content detected. Voice updated to: ' + selectedVoice.name;
                        } else {
                            voiceInfo.textContent = 'Voice updated to: ' + selectedVoice.name + ' for current content.';
                        }
                    }
                } else {
                    // No suitable voice found
                    currentVoice = null;
                    voiceSelect.value = '';
                    disableVoiceControls();
                    
                    // Update voice info
                    const voiceInfo = document.getElementById('voiceInfo');
                    if (voiceInfo) {
                        if (contentLanguage === 'ur') {
                            voiceInfo.textContent = 'Urdu content detected. No Urdu voice available. Voice reading disabled.';
                        } else if (contentLanguage === 'ar') {
                            voiceInfo.textContent = 'Arabic content detected. No Arabic voice available. Voice reading disabled.';
                        } else if (contentLanguage === 'hi') {
                            voiceInfo.textContent = 'Hindi content detected. No Hindi voice available. Voice reading disabled.';
                        } else {
                            voiceInfo.textContent = `No voice available for ${contentLanguage.toUpperCase()} language. Voice reading disabled.`;
                        }
                    }
                }
            }

            // Debug: List all available voices
            function debugVoices() {
                if ('speechSynthesis' in window) {
                    const voices = speechSynthesis.getVoices();
                    console.log('=== AVAILABLE VOICES ===');
                    console.log(`Total voices found: ${voices.length}`);
                    voices.forEach((voice, index) => {
                        console.log(`${index}: Name: ${voice.name}, Lang: ${voice.lang}, Local Service: ${voice.localService}, Default: ${voice.default}`);
                    });
                    console.log('=== END VOICES ===');
                    
                    // Check for Urdu voices specifically
                    const urduVoices = voices.filter(voice => 
                        voice.lang.startsWith('ur') || 
                        voice.lang.includes('ur') ||
                        voice.name.toLowerCase().includes('urdu')
                    );
                    console.log('=== URDU VOICES ===');
                    if (urduVoices.length > 0) {
                        urduVoices.forEach(voice => {
                            console.log(`Urdu Voice: ${voice.name}, Lang: ${voice.lang}, Local Service: ${voice.localService}`);
                        });
                    } else {
                        console.log('No Urdu voices found');
                    }
                    console.log('=== END URDU VOICES ===');
                } else {
                    console.log('Web Speech API is not supported in this browser.');
                }
            }

            // Initialize voice reading
            initVoiceReading();
            
            // Debug voices after a short delay to ensure they're loaded
            setTimeout(debugVoices, 1000);
            
            // Add observer to detect content changes (for translations)
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList' || mutation.type === 'characterData') {
                        // Content changed, update voice selection
                        setTimeout(updateVoiceForCurrentContent, 100);
                    }
                });
            });
            
            // Start observing the blog content
            observer.observe(blogContent, {
                childList: true,
                characterData: true,
                subtree: true
            });
        });
    </script>
</body>
</html>
